# REQUIRES: asserts
# RUN: llc -march=amdgcn -mcpu=gfx1010 -verify-machineinstrs -amdgpu-use-new-control-flow=1 -run-pass=gcn-wave-transform -gcn-wave-transform-print-final=1 -o - %s 2>&1 | FileCheck -check-prefixes=CFG %s

# TODO: Test some of the generated MIR. This is currently not done because
#       of high fluctuations in the MIR.

---

# CFG-LABEL: Wave CFG for simple_divergent:
# CFG-NEXT:    bb.0 (#0) -> bb.1(*)
# CFG-NEXT:    bb.1 (#2) -> bb.1(*) bb.2(*) [latestPostDom: bb.2] [divergence]
# CFG-NEXT:    bb.2 (#4) [secondary]

name: simple_divergent
tracksRegLiveness: true
body:             |
  bb.0:
    successors: %bb.1
    liveins: $vgpr0

    %0:vgpr_32 = COPY $vgpr0
    %1:sreg_32 = S_MOV_B32 0
    S_BRANCH %bb.1

  bb.1:
    successors: %bb.1, %bb.2

    %10:sreg_32 = PHI %1, %bb.0, %11, %bb.1
    %11:sreg_32 = S_ADD_U32 %10, 1, implicit-def $scc
    %12:sreg_32 = V_CMP_NE_U32_e64 %11, %0, implicit $exec
    SI_BRCOND killed %12, %bb.1
    S_BRANCH %bb.2

  bb.2:
    S_ENDPGM 0
...
---

# CFG-LABEL: Wave CFG for two_backedges_divergent:
# CFG-NEXT:    bb.0 (#0) -> bb.1(*)
# CFG-NEXT:    bb.1 (#2) -> bb.2(*) <flow-3>(bb.1) [latestPostDom: <flow-3>] [divergence]
# CFG-NEXT:    bb.2 (#3) -> <flow-3>(bb.1,bb.3) [divergence]
# CFG-NEXT:    <flow-3> (#4) -> bb.1(*) bb.3(*) [latestPostDom: bb.3] [divergence] [secondary]
# CFG-NEXT:    bb.3 (#5) [secondary]

name: two_backedges_divergent
tracksRegLiveness: true
body:             |
  bb.0:
    successors: %bb.1
    liveins: $vgpr0, $vgpr1

    %0:vgpr_32 = COPY $vgpr0
    %1:vgpr_32 = COPY $vgpr1
    %9:sreg_32 = S_MOV_B32 0
    S_BRANCH %bb.1

  bb.1:
    successors: %bb.1, %bb.2

    %10:sreg_32 = PHI %9, %bb.0, %11, %bb.1, %11, %bb.2
    %11:sreg_32 = S_ADD_U32 %10, 1, implicit-def $scc
    %12:sreg_32 = V_CMP_NE_U32_e64 %11, %0, implicit $exec
    SI_BRCOND killed %12, %bb.1
    S_BRANCH %bb.2

  bb.2:
    successors: %bb.1, %bb.3

    %20:sreg_32 = V_CMP_NE_U32_e64 %11, %1, implicit $exec
    SI_BRCOND killed %20, %bb.1
    S_BRANCH %bb.3

  bb.3:
    S_ENDPGM 0
...
---

# CFG-LABEL: Wave CFG for two_backedges_uniform_divergent:
# CFG-NEXT:    bb.0 (#0) -> bb.1(*)
# CFG-NEXT:    bb.1 (#2) -> bb.2(*) bb.1(*)
# CFG-NEXT:    bb.2 (#3) -> bb.1(*) bb.3(*) [latestPostDom: bb.3] [divergence]
# CFG-NEXT:    bb.3 (#5) [secondary]

name: two_backedges_uniform_divergent
tracksRegLiveness: true
body:             |
  bb.0:
    successors: %bb.1
    liveins: $sgpr0, $vgpr1

    %0:sgpr_32 = COPY $sgpr0
    %1:vgpr_32 = COPY $vgpr1
    %9:sreg_32 = S_MOV_B32 0
    S_BRANCH %bb.1

  bb.1:
    successors: %bb.1, %bb.2

    %10:sreg_32 = PHI %9, %bb.0, %11, %bb.1, %11, %bb.2
    %11:sreg_32 = S_ADD_U32 %10, 1, implicit-def $scc
    %12:sreg_32 = V_CMP_NE_U32_e64 %11, %0, implicit $exec
    SI_BRCOND killed %12, %bb.1
    S_BRANCH %bb.2

  bb.2:
    successors: %bb.1, %bb.3

    %20:sreg_32 = V_CMP_NE_U32_e64 %11, %1, implicit $exec
    SI_BRCOND killed %20, %bb.1
    S_BRANCH %bb.3

  bb.3:
    S_ENDPGM 0
...
---

# CFG-LABEL: Wave CFG for two_backedges_divergent_uniform:
# CFG-NEXT:    bb.0 (#0) -> bb.1(*)
# CFG-NEXT:    bb.1 (#2) -> bb.2(*) <flow-3>(bb.1) [latestPostDom: <flow-3>] [divergence]
# CFG-NEXT:    bb.2 (#3) -> <flow-3>(bb.1,bb.3)
# CFG-NEXT:    <flow-3> (#4) -> bb.1(*) bb.3(*) [latestPostDom: bb.3] [divergence] [secondary]
# CFG-NEXT:    bb.3 (#5) [secondary]

name: two_backedges_divergent_uniform
tracksRegLiveness: true
body:             |
  bb.0:
    successors: %bb.1
    liveins: $vgpr0, $sgpr1

    %0:vgpr_32 = COPY $vgpr0
    %1:sgpr_32 = COPY $sgpr1
    %9:sreg_32 = S_MOV_B32 0
    S_BRANCH %bb.1

  bb.1:
    successors: %bb.1, %bb.2

    %10:sreg_32 = PHI %9, %bb.0, %11, %bb.1, %11, %bb.2
    %11:sreg_32 = S_ADD_U32 %10, 1, implicit-def $scc
    %12:sreg_32 = V_CMP_NE_U32_e64 %11, %0, implicit $exec
    SI_BRCOND killed %12, %bb.1
    S_BRANCH %bb.2

  bb.2:
    successors: %bb.1, %bb.3

    %20:sreg_32 = V_CMP_NE_U32_e64 %11, %1, implicit $exec
    SI_BRCOND killed %20, %bb.1
    S_BRANCH %bb.3

  bb.3:
    S_ENDPGM 0
...
---

#
#         0
#         |
#    v---<1<--\
#    |    |   |
#    | v-<2<\ |
#    | |  | | |
#    | |  3-^ |
#    |/   \   |
#    4     ---^
#

# CFG-LABEL: Wave CFG for nested_uniform:
# CFG-NEXT:    bb.0 (#0) -> bb.1(*)
# CFG-NEXT:    bb.1 (#2) -> bb.4(*) bb.2(*)
# CFG-NEXT:    bb.2 (#4) -> bb.3(*) bb.4(*)
# CFG-NEXT:    bb.3 (#5) -> bb.2(*) bb.1(*)
# CFG-NEXT:    bb.4 (#9)

name: nested_uniform
tracksRegLiveness: true
body:             |
  bb.0:
    successors: %bb.1
    liveins: $sgpr0, $sgpr1, $sgpr2

    %0:sgpr_32 = COPY $sgpr0
    %1:sgpr_32 = COPY $sgpr1
    %2:sgpr_32 = COPY $sgpr2
    %9:sreg_32 = S_MOV_B32 0
    S_BRANCH %bb.1

  bb.1:
    successors: %bb.2, %bb.4

    %10:sreg_32 = PHI %9, %bb.0, %20, %bb.3
    %11:sreg_32 = V_CMP_NE_U32_e64 %10, %0, implicit $exec
    SI_BRCOND killed %11, %bb.2
    S_BRANCH %bb.4

  bb.2:
    successors: %bb.3, %bb.4

    %20:sreg_32 = S_ADD_U32 %10, 1, implicit-def $scc
    %21:sreg_32 = V_CMP_NE_U32_e64 %20, %1, implicit $exec
    SI_BRCOND killed %21, %bb.3
    S_BRANCH %bb.4

  bb.3:
    %30:sreg_32 = V_CMP_NE_U32_e64 %20, %2, implicit $exec
    SI_BRCOND killed %30, %bb.1
    S_BRANCH %bb.2

  bb.4:
    S_ENDPGM 0
...
---

#
#         0
#         |
#    v---<1<--\
#    |    |   |
#    | v-<2<\ |
#    | |  | | |
#    | |  3-^ |
#    |/   \   |
#    4     ---^
#

# CFG-LABEL: Wave CFG for nested_divergent:
# CFG-NEXT:    bb.0 (#0) -> bb.1(*)
# CFG-NEXT:    bb.1 (#2) -> bb.2(*) bb.4(*) [latestPostDom: bb.4] [divergence]
# CFG-NEXT:    bb.2 (#4) -> bb.3(*) <flow-6>(bb.4) [divergence]
# CFG-NEXT:    bb.3 (#5) -> bb.2(*) <flow-6>(bb.1) [latestPostDom: <flow-6>] [divergence]
# CFG-NEXT:    <flow-6> (#7) -> bb.1(*) bb.4(*) [latestPostDom: bb.4] [divergence] [secondary]
# CFG-NEXT:    bb.4 (#9) [secondary]

name: nested_divergent
tracksRegLiveness: true
body:             |
  bb.0:
    successors: %bb.1
    liveins: $vgpr0, $vgpr1, $vgpr2

    %0:vgpr_32 = COPY $vgpr0
    %1:vgpr_32 = COPY $vgpr1
    %2:vgpr_32 = COPY $vgpr2
    %9:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    S_BRANCH %bb.1

  bb.1:
    successors: %bb.2, %bb.4

    %10:vgpr_32 = PHI %9, %bb.0, %20, %bb.3
    %11:sreg_32 = V_CMP_NE_U32_e64 %10, %0, implicit $exec
    SI_BRCOND killed %11, %bb.2
    S_BRANCH %bb.4

  bb.2:
    successors: %bb.3, %bb.4

    %20:vgpr_32 = V_ADD_U32_e64 %10, 1, 0, implicit $exec
    %21:sreg_32 = V_CMP_NE_U32_e64 %20, %1, implicit $exec
    SI_BRCOND killed %21, %bb.3
    S_BRANCH %bb.4

  bb.3:
    %30:sreg_32 = V_CMP_NE_U32_e64 %20, %2, implicit $exec
    SI_BRCOND killed %30, %bb.1
    S_BRANCH %bb.2

  bb.4:
    S_ENDPGM 0
...
---

#
#         0
#         |
#      /->1
#      |  |
#      | [2
#      |  |
#      ^-<3
#         |
#         4
#

# CFG-LABEL: Wave CFG for nested2_uniform_uniform:
# CFG-NEXT:    bb.0 (#0) -> bb.1(*)
# CFG-NEXT:    bb.1 (#2) -> bb.2(*)
# CFG-NEXT:    bb.2 (#4) -> bb.3(*) bb.2(*)
# CFG-NEXT:    bb.3 (#6) -> bb.4(*) bb.1(*)
# CFG-NEXT:    bb.4 (#8)

name: nested2_uniform_uniform
tracksRegLiveness: true
body:             |
  bb.0:
    successors: %bb.1
    liveins: $sgpr0, $sgpr1

    %0:sgpr_32 = COPY $sgpr0
    %1:sgpr_32 = COPY $sgpr1
    %9:sreg_32 = S_MOV_B32 0
    S_BRANCH %bb.1

  bb.1:
    successors: %bb.2

    %10:sreg_32 = PHI %9, %bb.0, %30, %bb.3
    %19:sreg_32 = S_MOV_B32 0
    S_BRANCH %bb.2

  bb.2:
    successors: %bb.2, %bb.3

    %20:sreg_32 = PHI %19, %bb.1, %21, %bb.2
    %21:sreg_32 = S_ADD_U32 %20, 1, implicit-def $scc
    %22:sreg_32 = V_CMP_NE_U32_e64 %21, %1, implicit $exec
    SI_BRCOND killed %22, %bb.2
    S_BRANCH %bb.3

  bb.3:
    %30:sreg_32 = S_ADD_U32 %10, 1, implicit-def $scc
    %31:sreg_32 = V_CMP_NE_U32_e64 %30, %0, implicit $exec
    SI_BRCOND killed %31, %bb.1
    S_BRANCH %bb.4

  bb.4:
    S_ENDPGM 0
...
---

#
#         0
#         |
#      /->1
#      |  |
#      | [2
#      |  |
#      ^-<3
#         |
#         4
#

# CFG-LABEL: Wave CFG for nested2_divergent_divergent:
# CFG-NEXT:    bb.0 (#0) -> bb.1(*)
# CFG-NEXT:    bb.1 (#2) -> bb.2(*)
# CFG-NEXT:    bb.2 (#4) -> bb.2(*) bb.3(*) [latestPostDom: bb.3] [divergence]
# CFG-NEXT:    bb.3 (#6) -> bb.1(*) bb.4(*) [latestPostDom: bb.4] [divergence] [secondary]
# CFG-NEXT:    bb.4 (#8) [secondary]

name: nested2_divergent_divergent
tracksRegLiveness: true
body:             |
  bb.0:
    successors: %bb.1
    liveins: $vgpr0, $vgpr1

    %0:vgpr_32 = COPY $vgpr0
    %1:vgpr_32 = COPY $vgpr1
    %9:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    S_BRANCH %bb.1

  bb.1:
    successors: %bb.2

    %10:vgpr_32 = PHI %9, %bb.0, %30, %bb.3
    %19:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    S_BRANCH %bb.2

  bb.2:
    successors: %bb.2, %bb.3

    %20:vgpr_32 = PHI %19, %bb.1, %21, %bb.2
    %21:vgpr_32 = V_ADD_U32_e64 %20, 1, 0, implicit $exec
    %22:sreg_32 = V_CMP_NE_U32_e64 %21, %1, implicit $exec
    SI_BRCOND killed %22, %bb.2
    S_BRANCH %bb.3

  bb.3:
    %30:vgpr_32 = V_ADD_U32_e64 %10, 1, 0, implicit $exec
    %31:sreg_32 = V_CMP_NE_U32_e64 %30, %0, implicit $exec
    SI_BRCOND killed %31, %bb.1
    S_BRANCH %bb.4

  bb.4:
    S_ENDPGM 0
...
---

#
#         0
#         |
#     /-->1<--\
#     |  / \  |
#     ^-2   3-^
#       |   |
#       4   5
#        \ /
#         6
#

# CFG-LABEL: Wave CFG for multi_backedge_exits_divergent_divergent:
# CFG-NEXT:    bb.0 (#0) -> bb.1(*)
# CFG-NEXT:    bb.1 (#2) -> bb.2(*) <flow-3>(bb.3) [latestPostDom: <flow-4>] [divergence]
# CFG-NEXT:    bb.2 (#3) -> <flow-3>(bb.1,bb.4) [divergence]
# CFG-NEXT:    <flow-3> (#4) -> bb.3(*) <flow-4>(bb.4,bb.1) [latestPostDom: <flow-4>] [divergence] [secondary]
# CFG-NEXT:    bb.3 (#4) -> <flow-4>(bb.1,bb.5) [divergence]
# CFG-NEXT:    <flow-4> (#5) -> bb.1(*) <flow-5>(bb.4,bb.5) [latestPostDom: <flow-5>] [divergence] [secondary]
# CFG-NEXT:    <flow-5> (#6) -> bb.5(*) <flow-6>(bb.4) [latestPostDom: <flow-6>] [divergence] [secondary]
# CFG-NEXT:    bb.5 (#6) -> <flow-6>(bb.6)
# CFG-NEXT:    <flow-6> (#7) -> bb.4(*) bb.6(*) [latestPostDom: bb.6] [divergence] [secondary]
# CFG-NEXT:    bb.4 (#7) -> bb.6(*)
# CFG-NEXT:    bb.6 (#8) [secondary]

name: multi_backedge_exits_divergent_divergent
tracksRegLiveness: true
body:             |
  bb.0:
    successors: %bb.1
    liveins: $vgpr0, $vgpr1, $vgpr2

    %0:vgpr_32 = COPY $vgpr0
    %1:vgpr_32 = COPY $vgpr1
    %2:vgpr_32 = COPY $vgpr2
    %9:sreg_32 = S_MOV_B32 0
    S_BRANCH %bb.1

  bb.1:
    successors: %bb.2, %bb.3

    %10:sreg_32 = PHI %9, %bb.0, %11, %bb.2, %11, %bb.3
    %11:sreg_32 = S_ADD_U32 %10, 1, implicit-def $scc
    %12:sreg_32 = V_CMP_NE_U32_e64 %11, %0, implicit $exec
    SI_BRCOND killed %12, %bb.2
    S_BRANCH %bb.3

  bb.2:
    successors: %bb.1, %bb.4

    %20:sreg_32 = V_CMP_NE_U32_e64 %11, %1, implicit $exec
    SI_BRCOND killed %20, %bb.1
    S_BRANCH %bb.4

  bb.3:
    successors: %bb.1, %bb.5

    %30:sreg_32 = V_CMP_NE_U32_e64 %11, %2, implicit $exec
    SI_BRCOND killed %30, %bb.1
    S_BRANCH %bb.5

  bb.4:
    successors: %bb.6

    S_BRANCH %bb.6

  bb.5:
    successors: %bb.6

    S_BRANCH %bb.6

  bb.6:
    S_ENDPGM 0
...
---

#
#         0
#         |
#     /-->1<--\
#     |  / \  |
#     ^-2   3-^
#       |   |
#       4   5
#        \ /
#         6
#

# CFG-LABEL: Wave CFG for multi_backedge_exits_uniform_divergent:
# CFG-NEXT:    bb.0 (#0) -> bb.1(*)
# CFG-NEXT:    bb.1 (#2) -> bb.2(*) bb.3(*)
# CFG-NEXT:    bb.2 (#3) -> bb.1(*) <flow-3>(bb.4) [divergence]
# CFG-NEXT:    bb.3 (#4) -> bb.1(*) <flow-3>(bb.5) [latestPostDom: <flow-3>] [divergence]
# CFG-NEXT:    <flow-3> (#6) -> bb.5(*) <flow-4>(bb.4) [latestPostDom: <flow-4>] [divergence] [secondary]
# CFG-NEXT:    bb.5 (#6) -> <flow-4>(bb.6)
# CFG-NEXT:    <flow-4> (#7) -> bb.4(*) bb.6(*) [latestPostDom: bb.6] [divergence] [secondary]
# CFG-NEXT:    bb.4 (#7) -> bb.6(*)
# CFG-NEXT:    bb.6 (#8) [secondary]

name: multi_backedge_exits_uniform_divergent
tracksRegLiveness: true
body:             |
  bb.0:
    successors: %bb.1
    liveins: $sgpr0, $vgpr1, $vgpr2

    %0:sgpr_32 = COPY $sgpr0
    %1:vgpr_32 = COPY $vgpr1
    %2:vgpr_32 = COPY $vgpr2
    %9:sreg_32 = S_MOV_B32 0
    S_BRANCH %bb.1

  bb.1:
    successors: %bb.2, %bb.3

    %10:sreg_32 = PHI %9, %bb.0, %11, %bb.2, %11, %bb.3
    %11:sreg_32 = S_ADD_U32 %10, 1, implicit-def $scc
    %12:sreg_32 = V_CMP_NE_U32_e64 %11, %0, implicit $exec
    SI_BRCOND killed %12, %bb.2
    S_BRANCH %bb.3

  bb.2:
    successors: %bb.1, %bb.4

    %20:sreg_32 = V_CMP_NE_U32_e64 %11, %1, implicit $exec
    SI_BRCOND killed %20, %bb.1
    S_BRANCH %bb.4

  bb.3:
    successors: %bb.1, %bb.5

    %30:sreg_32 = V_CMP_NE_U32_e64 %11, %2, implicit $exec
    SI_BRCOND killed %30, %bb.1
    S_BRANCH %bb.5

  bb.4:
    successors: %bb.6

    S_BRANCH %bb.6

  bb.5:
    successors: %bb.6

    S_BRANCH %bb.6

  bb.6:
    S_ENDPGM 0
...
---

#
#         0
#         |
#     /-->1<--\
#     |  / \  |
#     ^-2   3-^
#       |   |
#       4   5
#        \ /
#         6
#

# CFG-LABEL: Wave CFG for multi_backedge_exits_divergent_uniform:
# CFG-NEXT:    bb.0 (#0) -> bb.1(*)
# CFG-NEXT:    bb.1 (#2) -> bb.2(*) <flow-3>(bb.3) [latestPostDom: <flow-4>] [divergence]
# CFG-NEXT:    bb.2 (#3) -> <flow-3>(bb.1,bb.4)
# CFG-NEXT:    <flow-3> (#4) -> bb.3(*) <flow-4>(bb.4,bb.1) [latestPostDom: <flow-4>] [divergence] [secondary]
# CFG-NEXT:    bb.3 (#4) -> <flow-4>(bb.1,bb.5)
# CFG-NEXT:    <flow-4> (#5) -> bb.1(*) <flow-5>(bb.4,bb.5) [latestPostDom: <flow-5>] [divergence] [secondary]
# CFG-NEXT:    <flow-5> (#6) -> bb.5(*) <flow-6>(bb.4) [latestPostDom: <flow-6>] [divergence] [secondary]
# CFG-NEXT:    bb.5 (#6) -> <flow-6>(bb.6)
# CFG-NEXT:    <flow-6> (#7) -> bb.4(*) bb.6(*) [latestPostDom: bb.6] [divergence] [secondary]
# CFG-NEXT:    bb.4 (#7) -> bb.6(*)
# CFG-NEXT:    bb.6 (#8) [secondary]

name: multi_backedge_exits_divergent_uniform
tracksRegLiveness: true
body:             |
  bb.0:
    successors: %bb.1
    liveins: $vgpr0, $sgpr1, $sgpr2

    %0:vgpr_32 = COPY $vgpr0
    %1:sgpr_32 = COPY $sgpr1
    %2:sgpr_32 = COPY $sgpr2
    %9:sreg_32 = S_MOV_B32 0
    S_BRANCH %bb.1

  bb.1:
    successors: %bb.2, %bb.3

    %10:sreg_32 = PHI %9, %bb.0, %11, %bb.2, %11, %bb.3
    %11:sreg_32 = S_ADD_U32 %10, 1, implicit-def $scc
    %12:sreg_32 = V_CMP_NE_U32_e64 %11, %0, implicit $exec
    SI_BRCOND killed %12, %bb.2
    S_BRANCH %bb.3

  bb.2:
    successors: %bb.1, %bb.4

    %20:sreg_32 = V_CMP_NE_U32_e64 %11, %1, implicit $exec
    SI_BRCOND killed %20, %bb.1
    S_BRANCH %bb.4

  bb.3:
    successors: %bb.1, %bb.5

    %30:sreg_32 = V_CMP_NE_U32_e64 %11, %2, implicit $exec
    SI_BRCOND killed %30, %bb.1
    S_BRANCH %bb.5

  bb.4:
    successors: %bb.6

    S_BRANCH %bb.6

  bb.5:
    successors: %bb.6

    S_BRANCH %bb.6

  bb.6:
    S_ENDPGM 0
...
---

#
#         0
#         |
#     /-->1<--\
#     |  / \  |
#     ^-2   3-^
#       |   |
#       4   5
#        \ /
#         6
#

# CFG-LABEL: Wave CFG for multi_backedge_exits_uniform_uniform:
# CFG-NEXT:    bb.0 (#0) -> bb.1(*)
# CFG-NEXT:    bb.1 (#2) -> bb.2(*) bb.3(*)
# CFG-NEXT:    bb.2 (#3) -> bb.4(*) bb.1(*)
# CFG-NEXT:    bb.3 (#4) -> bb.5(*) bb.1(*)
# CFG-NEXT:    bb.5 (#6) -> bb.6(*)
# CFG-NEXT:    bb.4 (#7) -> bb.6(*)
# CFG-NEXT:    bb.6 (#8)

name: multi_backedge_exits_uniform_uniform
tracksRegLiveness: true
body:             |
  bb.0:
    successors: %bb.1
    liveins: $sgpr0, $sgpr1, $sgpr2

    %0:sgpr_32 = COPY $sgpr0
    %1:sgpr_32 = COPY $sgpr1
    %2:sgpr_32 = COPY $sgpr2
    %9:sreg_32 = S_MOV_B32 0
    S_BRANCH %bb.1

  bb.1:
    successors: %bb.2, %bb.3

    %10:sreg_32 = PHI %9, %bb.0, %11, %bb.2, %11, %bb.3
    %11:sreg_32 = S_ADD_U32 %10, 1, implicit-def $scc
    %12:sreg_32 = V_CMP_NE_U32_e64 %11, %0, implicit $exec
    SI_BRCOND killed %12, %bb.2
    S_BRANCH %bb.3

  bb.2:
    successors: %bb.1, %bb.4

    %20:sreg_32 = V_CMP_NE_U32_e64 %11, %1, implicit $exec
    SI_BRCOND killed %20, %bb.1
    S_BRANCH %bb.4

  bb.3:
    successors: %bb.1, %bb.5

    %30:sreg_32 = V_CMP_NE_U32_e64 %11, %2, implicit $exec
    SI_BRCOND killed %30, %bb.1
    S_BRANCH %bb.5

  bb.4:
    successors: %bb.6

    S_BRANCH %bb.6

  bb.5:
    successors: %bb.6

    S_BRANCH %bb.6

  bb.6:
    S_ENDPGM 0
...
